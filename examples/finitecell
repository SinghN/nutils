#! /usr/bin/env python

from nutils import *


def surface_volume( ndims ):
  volume = 1.
  surf0 = 2.
  for idim in range( ndims ):
    surface = surf0
    surf0 = volume * (2*numeric.pi)
    volume = surface / (idim+1)
  return surface, volume


def main( ndims=2, nelems=4, maxrefine=2, stress=library.Hooke(lmbda=1,mu=1) ):

  L = 2**(1./ndims)
  verts = numeric.linspace( 0, L, nelems+1 )
  wholedomain, geom = mesh.rectilinear( [verts]*ndims )
  dspace = wholedomain.splinefunc( degree=2 ).vector( ndims )
  levelset = ( geom**2 ).sum() - 1.
  domain, complement = wholedomain.trim( levelset, maxrefine=maxrefine )

  ball_surface, ball_volume = surface_volume( ndims )

  volume = domain.integrate( 1., geometry=geom, ischeme='gauss1' )
  exact_volume = 2 - .5**ndims * ball_volume
  log.info( 'volume: %f (exact: %f, error %.1f%%)' % ( volume, exact_volume, abs(100*(volume-exact_volume)/exact_volume) ) )

  surface = domain.boundary.integrate( 1., geometry=geom, ischeme='gauss1' )
  exact_surface = 2 * ndims * L**(ndims-1) - ndims * .5**(ndims-1) * surface_volume(ndims-1)[1] + .5**ndims * ball_surface
  log.info( 'surface: %f (exact: %f, error %.1f%%)' % ( surface, exact_surface, abs(100*(surface-exact_surface)/exact_surface) ) )

  volumes = domain.boundary.integrate( geom * geom.normal(), geometry=geom, ischeme='gauss1' )
  log.info( 'partial integration:', volumes / volume )

  support = domain.integrate( function.norm2( dspace ), geometry=geom, ischeme='gauss3' )
  cons = util.NanVec( len(support) )
  cons[ support==0 ] = 0
  offset = numeric.zeros( ndims )
  offset[0] = .5
  cons |= wholedomain.boundary['right'].project( offset, geometry=geom, ischeme='gauss3', onto=dspace )
  cons |= wholedomain.boundary['left'].project( 0, geometry=geom, ischeme='gauss3', onto=dspace )

  elasticity = function.outer( dspace.grad(geom), stress(dspace,geom) ).sum([2,3])
  matrix = domain.integrate( elasticity, geometry=geom, ischeme='gauss3' )
  rhs = 0#domain.boundary.integrate( -1. * dspace.dotnorm(geom), geometry=geom, ischeme='gauss3' )
  lhs = matrix.solve( rhs, constrain=cons, tol=1e-5, symmetric=True )
  disp = dspace.dot( lhs )

  plotdomain = domain.refined
  defo = geom + disp

  if ndims == 2:
    points, colors = plotdomain.simplex.elem_eval( [ defo, stress(disp,geom)[0,1] ], ischeme='vertex2', separate=True )
    bpoints = plotdomain.boundary['trim'].elem_eval( defo, ischeme='vertex2', separate=True )
    xy, uv = domain.boundary.elem_eval( [ defo, defo.normal() ], ischeme='uniform1', separate=False )
    with plot.PyPlot( 'deformation' ) as plt:
      plt.mesh( points, colors, triangulate='bezier' )
      plt.colorbar()
      plt.quiver( xy[:,0], xy[:,1], uv[:,0], uv[:,1] )
      plt.plot( bpoints[:,0], bpoints[:,1], 'r' )

  if ndims == 3:
    points, colors, normal = plotdomain.boundary.simplex.elem_eval( [ defo, stress(disp,geom)[0,1], defo.normal() ], ischeme='vtk', separate=True )
    with plot.VTKFile( 'deformation', ascii=False ) as vtkfile:
      vtkfile.unstructuredgrid( points )
      vtkfile.pointdataarray( 'stress', colors )
      vtkfile.pointdataarray( 'normal', normal )

util.run( main )
